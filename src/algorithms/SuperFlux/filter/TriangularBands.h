/*
 * Copyright (C) 2006-2013  Music Technology Group - Universitat Pompeu Fabra
 *
 * This file is part of Essentia
 *
 * Essentia is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation (FSF), either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the Affero GNU General Public License
 * version 3 along with this program.  If not, see http://www.gnu.org/licenses/
 */

#ifndef ESSENTIA_TRIANGULARBANDS_H
#define ESSENTIA_TRIANGULARBANDS_H

#include "algorithm.h"
#include "essentiautil.h"

using namespace std;

namespace essentia {
namespace standard {

class TriangularBands : public Algorithm {

 protected:
  Input<std::vector<Real> > _spectrumInput;
  Output<std::vector<Real> > _bandsOutput;
  
  std::vector<Real> _bandFrequencies;
  std::vector<Real> _freqBands;
  Real _sampleRate;
  bool _isLog;

 public:
  TriangularBands() {
    declareInput(_spectrumInput, "spectrum", "the input spectrum (must be greater than size one)");
    declareOutput(_bandsOutput, "bands", "the energy in each band");
  }

  void declareParameters() {
    // TODO: where this band frequencies come from? (provide references)
    Real freqBands[] =// {21.533203125, 43.06640625, 64.599609375, 86.1328125, 107.666015625, 129.19921875, 150.732421875, 172.265625, 193.798828125, 215.33203125, 236.865234375, 258.3984375, 279.931640625, 301.46484375, 322.998046875, 344.53125, 366.064453125, 387.59765625, 409.130859375, 430.6640625, 452.197265625, 473.73046875, 495.263671875, 516.796875, 538.330078125, 559.86328125, 581.396484375, 602.9296875, 624.462890625, 645.99609375, 667.529296875, 689.0625, 710.595703125, 732.12890625, 753.662109375, 775.1953125, 796.728515625, 839.794921875, 861.328125, 882.861328125, 904.39453125, 925.927734375, 968.994140625, 990.52734375, 1012.060546875, 1055.126953125, 1076.66015625, 1098.193359375, 1141.259765625, 1184.326171875, 1205.859375, 1248.92578125, 1270.458984375, 1313.525390625, 1356.591796875, 1399.658203125, 1442.724609375, 1485.791015625, 1528.857421875, 1571.923828125, 1614.990234375, 1658.056640625, 1701.123046875, 1765.72265625, 1808.7890625, 1873.388671875, 1916.455078125, 1981.0546875, 2024.12109375, 2088.720703125, 2153.3203125, 2217.919921875, 2282.51953125, 2347.119140625, 2411.71875, 2497.8515625, 2562.451171875, 2627.05078125, 2713.18359375, 2799.31640625, 2885.44921875, 2950.048828125, 3036.181640625, 3143.84765625, 3229.98046875, 3316.11328125, 3423.779296875, 3509.912109375, 3617.578125, 3725.244140625, 3832.91015625, 3940.576171875, 4069.775390625, 4177.44140625, 4306.640625, 4435.83984375, 4565.0390625, 4694.23828125, 4844.970703125, 4974.169921875, 5124.90234375, 5275.634765625, 5426.3671875, 5577.099609375, 5749.365234375, 5921.630859375, 6093.896484375, 6266.162109375, 6459.9609375, 6653.759765625, 6847.55859375, 7041.357421875, 7256.689453125, 7450.48828125, 7687.353515625, 7902.685546875, 8139.55078125, 8376.416015625, 8613.28125, 8871.6796875, 9130.078125, 9388.4765625, 9668.408203125, 9948.33984375, 10249.8046875, 10551.26953125, 10852.734375, 11175.732421875, 11498.73046875, 11843.26171875, 12187.79296875, 12553.857421875, 12919.921875, 13285.986328125, 13673.583984375, 14082.71484375, 14491.845703125, 14922.509765625, 15353.173828125, 15805.37109375, 16257.568359375};
    {97.9988589954371, 100.87044475251362, 103.82617439498607, 106.86851352689642, 109.99999999999977, 113.2232460307839, 116.54094037952225, 119.95585059317811, 123.47082531403079, 127.08879665594979, 130.81278265029908, 134.64588976351183, 138.5913154884358, 142.65235101161082, 146.83238395870353, 151.13490122038954, 155.56349186104018, 160.12185011264032, 164.81377845643468, 169.6431907948732, 174.61411571650163, 179.73069985652066, 184.9972113558169, 190.41804342135114, 195.99771799087432, 201.74088950502735, 207.65234878997225, 213.73702705379299, 219.9999999999997, 226.44649206156794, 233.08188075904465, 239.91170118635637, 246.94165062806175, 254.17759331189976, 261.62556530059834, 269.29177952702383, 277.1826309768718, 285.3047020232218, 293.66476791740723, 302.2698024407793, 311.12698372208064, 320.243700225281, 329.6275569128697, 339.2863815897468, 349.2282314330037, 359.4613997130418, 369.9944227116343, 380.83608684270285, 391.9954359817492, 403.4817790100553, 415.30469757994507, 427.47405410758654, 440, 452.8929841231365, 466.1637615180899, 479.8234023727134, 493.8833012561242, 508.3551866238002, 523.2511306011974, 538.5835590540485, 554.3652619537444, 570.6094040464445, 587.3295358348154, 604.5396048815595, 622.2539674441622, 640.4874004505629, 659.2551138257403, 678.5727631794945, 698.4564628660083, 718.9227994260846, 739.9888454232695, 761.6721736854066, 783.9908719634994, 806.9635580201116, 830.6093951598913, 854.9481082151742, 880.0000000000011, 905.7859682462743, 932.3275230361812, 959.6468047454282, 987.7666025122497, 1016.7103732476019, 1046.5022612023963, 1077.1671181080985, 1108.7305239074904, 1141.2188080928906, 1174.6590716696326, 1209.0792097631208, 1244.5079348883262, 1280.9748009011275, 1318.5102276514824, 1357.1455263589908, 1396.9129257320185, 1437.845598852171, 1479.9776908465408, 1523.344347370815, 1567.9817439270007, 1613.927116040225, 1661.2187903197844, 1709.8962164303503, 1760.000000000004, 1811.5719364925503, 1864.6550460723643, 1919.2936094908582, 1975.5332050245015, 2033.4207464952058, 2093.0045224047944, 2154.334236216199, 2217.4610478149825, 2282.437616185783, 2349.318143339267, 2418.1584195262435, 2489.015869776654, 2561.949601802257, 2637.020455302967, 2714.291052717984, 2793.8258514640393, 2875.691197704344, 2959.955381693084, 3046.6886947416324, 3135.9634878540037, 3227.8542320804527, 3322.4375806395715, 3419.7924328607037, 3520.0000000000114, 3623.143872985104, 3729.3100921447317, 3838.58721898172, 3951.0664100490067, 4066.841492990415, 4186.0090448095925, 4308.668472432401, 4434.922095629969, 4564.87523237157, 4698.6362866785375, 4836.316839052491, 4978.031739553312, 5123.899203604517};
    declareParameter("sampleRate", "the sampling rate of the audio signal [Hz]", "(0,inf)", 44100.);
    declareParameter("frequencyBands", "list of frequency ranges into which the spectrum is divided (these must be in ascending order and connot contain duplicates),"\
    					"each triangle is build as x(i-1)=, x(i)=1, x(i+1)=0 over i, the resulting number of bands is size of input array - 2", "", arrayToVector<Real>(freqBands));
    declareParameter("log", "taking log10 (1 + magnitude) in each band","{true,false}", true);
  }

  void compute();
  void configure();

  static const char* name;
  static const char* description;
};

} // namespace standard
} // namespace essentia

#include "streamingalgorithmwrapper.h"

namespace essentia {
namespace streaming {

class TriangularBands : public StreamingAlgorithmWrapper {

 protected:
  Sink<std::vector<Real> > _spectrumInput;
  Source<std::vector<Real> > _bandsOutput;

 public:
  TriangularBands() {
    declareAlgorithm("TriangularBands");
    declareInput(_spectrumInput, TOKEN, "spectrum");
    declareOutput(_bandsOutput, TOKEN, "bands");
  }
};

} // namespace streaming
} // namespace essentia

#endif // ESSENTIA_TRIANGULARBANDS_H
